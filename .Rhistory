#for kaggle since the metric is multi logloss.
model_rf$prediction.error #27.6% OOB error for the probability tree - seems weird.
#variable importance:
model_rf$variable.importance %>% sort(decreasing = TRUE) %>%
barplot(las = 1, main = "Variable Importance for Random Forest")
predict(model_rf, test) ->rf_pred
rf_pred <- rf_pred$predictions
cv_xgb <- xgb.cv(data = design_matrix_train,label = new_y,
nround = nround,
eta = 0.1,
objective = "multi:softprob",
#eval_metric = "mlogloss",
num_class = 5,
max.depth = 6,
nfold = 5,
min_child_weight = 1)
cv_xgb <- xgb.cv(data = design_matrix_train,label = new_y,
nround = nround,
eta = 0.1,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = 5,
max.depth = 6,
nfold = 5,
min_child_weight = 5)
cv_xgb <- xgb.cv(data = design_matrix_train,label = new_y,
nround = nround,
eta = 0.1,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = 5,
max.depth = 6,
nfold = 5,
min_child_weight = 1,
gamma = 0.1)
best_rf <- (2*best[,-1] + rf_pred)/3
best_rf$ID <- test$ID
View(best_rf)
write.csv(best_rf, "rf800trees+bestxgb.csv", row.names = FALSE)
model_rf
best <- read.csv("xgboosttry_withnumericfeats.csv")
best_rf <- (best[,-1] + rf_pred)/2
best_rf$ID <- test$ID
write.csv(best_rf, "rf800trees+bestxgb.csv", row.names = FALSE)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(lubridate)
train <- read.csv("data/train.csv", stringsAsFactors = FALSE)
train$OutcomeType[train$OutcomeType == "Return_to_owner"] <- "Return to Owner"
train$age  <- train$AgeuponOutcome
train$age[grepl("day", train$AgeuponOutcome)] <- "< a week"
train$age[grepl("week", train$AgeuponOutcome)] <-  "< a month"
filter(train, age != "") -> train
filter(train, age != "0 years") -> train
train$age[train$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
train$age <- factor(train$age, level = c("< a week", "< a month",
"1 month", "2 months", "3 months", "4 months", "5 months", "6 months" ,"7 months",
"8 months", "9 months", "10 months", "11 months",
"1 year", "2 years", "3 years", "4 years", "5 years",
"6 years", "7 years", "8 years", "9 years", "10 years", "11 years",
"12 years", "> 12 years"))
train %>% count(age) %>%
ggplot(aes(x = age, y = n)) +
geom_bar(stat = "identity", alpha = 0.5) +
theme_void() +
ylab("Count") +
ggtitle("Outcome Type by Age upon Outcome") +
theme(axis.title.y = element_text(angle = 90, color = "#737373" )) -> g1
ggplot(train, aes(x = age, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill",  alpha = 0.9) +
scale_fill_brewer(palette = "Set1") +
theme_void() +
ylab("Relative Count by Outcome") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 11, color = "#737373"),
legend.position = "bottom",
axis.title.y = element_text(angle = 90, color = "#737373")) -> g2
grid.arrange(g1, g2, ncol = 1, heights = c(1,3))
count(train, breed1) %>%
arrange(desc(n)) %>%
filter(n >150) -> popular
train$breed1[!(train$breed1 %in% popular$breed1)] <- "Exotic"
#a look at the plots:
filter(train, AnimalType == "Cat") %>%
ggplot(aes(x = breed1, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill", width = 0.7) +
coord_flip() +
ggtitle(" Cat Breeds by Outcome") +
scale_fill_brewer(palette = "Set1") +
theme(axis.title = element_blank())
train %>%
count(breed1) %>%
arrange(desc(n)) %>%  head(15) %>%
ggplot(aes(x = reorder(breed1, n), y = n)) +
geom_bar(stat = "identity", width = 0.8) +
coord_flip() +
theme(axis.title.y = element_blank()) +
ggtitle("Popular Breeds") +
ylab("Number of Animals")
gsub(" Mix", "", train$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> train$breed1
train %>%
count(breed1) %>%
arrange(desc(n)) %>%  head(15) %>%
ggplot(aes(x = reorder(breed1, n), y = n)) +
geom_bar(stat = "identity", width = 0.8) +
coord_flip() +
theme(axis.title.y = element_blank()) +
ggtitle("Popular Breeds") +
ylab("Number of Animals")
count(train, breed1) %>%
arrange(desc(n)) %>%
filter(n >150) -> popular
train$breed1[!(train$breed1 %in% popular$breed1)] <- "Exotic"
#a look at the plots:
filter(train, AnimalType == "Cat") %>%
ggplot(aes(x = breed1, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill", width = 0.7) +
coord_flip() +
ggtitle(" Cat Breeds by Outcome") +
scale_fill_brewer(palette = "Set1") +
theme(axis.title = element_blank())
breedz <- data.frame(breed = train$breed1, outcome = train$OutcomeType, type = train$AnimalType)
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Adoption", type == "Cat") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Adopted") +
ggtitle("Adoption Rate by Breed - Cats") +
theme(axis.title.y = element_blank())
filter(train , AnimalType == "Dog") %>%
ggplot(aes(x = breed1, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill", width = 0.8) +
ggtitle("Dog Breeds by Outcome") +
coord_flip() +
scale_fill_brewer(palette = "Set1") +
theme(axis.title = element_blank())
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Adoption", type == "Dog") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Adopted") +
ggtitle("Adoption Rate by Breed - Dogs") +
theme(axis.title.y = element_blank())
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Euthanasia", type == "Dog") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Euthanised") +
ggtitle("Euthanasia Rates by Breed - Dogs") +
theme(axis.title.y = element_blank())
library(dplyr)
library(ggplot2)
library(gridExtra)
library(lubridate)
train <- read.csv("data/train.csv", stringsAsFactors = FALSE)
train$OutcomeType[train$OutcomeType == "Return_to_owner"] <- "Return to Owner"
train$age  <- train$AgeuponOutcome
train$age[grepl("day", train$AgeuponOutcome)] <- "< a week"
train$age[grepl("week", train$AgeuponOutcome)] <-  "< a month"
filter(train, age != "") -> train
filter(train, age != "0 years") -> train
train$age[train$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
train$age <- factor(train$age, level = c("< a week", "< a month",
"1 month", "2 months", "3 months", "4 months", "5 months", "6 months" ,"7 months",
"8 months", "9 months", "10 months", "11 months",
"1 year", "2 years", "3 years", "4 years", "5 years",
"6 years", "7 years", "8 years", "9 years", "10 years", "11 years",
"12 years", "> 12 years"))
train %>% count(age) %>%
ggplot(aes(x = age, y = n)) +
geom_bar(stat = "identity", alpha = 0.5) +
theme_void() +
ylab("Count") +
ggtitle("Outcome Type by Age upon Outcome") +
theme(axis.title.y = element_text(angle = 90, color = "#737373" )) -> g1
ggplot(train, aes(x = age, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill",  alpha = 0.9) +
scale_fill_brewer(palette = "Set1") +
theme_void() +
ylab("Relative Count by Outcome") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 11, color = "#737373"),
legend.position = "bottom",
axis.title.y = element_text(angle = 90, color = "#737373")) -> g2
grid.arrange(g1, g2, ncol = 1, heights = c(1,3))
train %>%
count(breed1) %>%
arrange(desc(n)) %>%  head(15) %>%
ggplot(aes(x = reorder(breed1, n), y = n)) +
geom_bar(stat = "identity", width = 0.8) +
coord_flip() +
theme(axis.title.y = element_blank()) +
ggtitle("Popular Breeds") +
ylab("Number of Animals")
gsub(" Mix", "", train$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> train$breed1
count(train, breed1) %>%
arrange(desc(n)) %>%
filter(n >150) -> popular
train$breed1[!(train$breed1 %in% popular$breed1)] <- "Exotic"
#a look at the plots:
filter(train, AnimalType == "Cat") %>%
ggplot(aes(x = breed1, fill = OutcomeType)) +
geom_bar(stat = "count", position = "fill", width = 0.7) +
coord_flip() +
ggtitle(" Cat Breeds by Outcome") +
scale_fill_brewer(palette = "Set1") +
theme(axis.title = element_blank())
breedz <- data.frame(breed = train$breed1, outcome = train$OutcomeType, type = train$AnimalType)
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Adoption", type == "Cat") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Adopted") +
ggtitle("Adoption Rate by Breed - Cats") +
theme(axis.title.y = element_blank())
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Adoption", type == "Dog") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Adopted") +
ggtitle("Adoption Rate by Breed - Dogs") +
theme(axis.title.y = element_blank())
breedz %>%
group_by(type, breed, outcome) %>%
summarise(n = n()) %>%
mutate(frac =  n/sum(n)) %>%
ungroup() %>%
filter(outcome == "Euthanasia", type == "Dog") %>%
arrange(frac) %>%
ggplot(aes(x = reorder(breed, frac), y = frac)) +
geom_point(size = 3, color = "dark blue") +
theme_minimal() +
coord_flip() +
ylab("Fraction Euthanised") +
ggtitle("Euthanasia Rates by Breed - Dogs") +
theme(axis.title.y = element_blank())
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(Matrix)
train <- read.csv("data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("data/test.csv", stringsAsFactors = FALSE)
y <- as.factor(train$OutcomeType)
names(train)[1] <- "ID"
data <- rbind(train[,-c(4,5)], test)
#NAME:
data$named <- 1*(data$Name != "")
#let's start with DATETIME:
data %>%
mutate(year = year(data$DateTime),
month = month(data$DateTime),
day = day(data$DateTime),
hour = hour(data$DateTime),
wday = wday(data$DateTime)) -> data
data$minutes <- minute(data$DateTime)
data$DateTime <- as.numeric(as.POSIXct(data$DateTime))
#make a weekend var:
data$weekend <- 1*data$wday %in% c(1, 7)
# so I should use weekend, year, month and hour - no NA's
#SEXUPONOUTCOME:
# seems important:
data$SexuponOutcome[data$SexuponOutcome == ""] <- "Unknown"
#AGEUPONOUTCOME:
data$age  <- data$AgeuponOutcome
data$age[grepl("day", data$AgeuponOutcome)] <- "< a week"
data$age[grepl("week", data$AgeuponOutcome)] <-  "< a month"
data$age[data$age == ""] <- "1 year"
data$age[data$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
data$AgeuponOutcome <- gsub(" years?","0000",data$AgeuponOutcome)
data$AgeuponOutcome <- gsub(" months?","00",data$AgeuponOutcome)
data$AgeuponOutcome <- gsub(" weeks?","0",data$AgeuponOutcome)
data$AgeuponOutcome <- gsub(" days?","",data$AgeuponOutcome)
data$AgeuponOutcome <- as.numeric(paste0("0",data$AgeuponOutcome))
#MIX:
data$mix <- 1*(grepl("Mix", data$Breed, fixed = TRUE))
#BREED:
# seems to matter mostly for cats & PitBull:
gsub(" Mix", "", data$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> data$breed1
count(data, breed1) %>% arrange(desc(n)) %>% filter(n >75) -> popular
data$breed1[!(data$breed1 %in% popular$breed1)] <- "Exotic"
#COLORS:
strsplit(x = data$Color, split = "/") %>% sapply(function(x){x[1]}) -> data$color1
data %>% count(color1) %>% arrange(desc(n)) %>% filter(n > 200) -> colors
data$color1[!(data$color1 %in% colors$color1)] <- "othercolor"
#dash in the breed:
data$dash <- grepl("/", data$Breed)
#number of letter in the name:
data$namelength <- nchar(data$Name)
#
data$DateTime <- scale(data$DateTime)
#see how many levels you have
sapply(data, function(x){unique(x) %>% length()})
train <- cbind(data[1:dim(train)[1],], OutcomeType = y)
test <- cbind(data[-(1:dim(train)[1]),])
# now we're good.
#let's also create the design_matrices.
design_matrix <- sparse.model.matrix( ~   DateTime +
AnimalType +
SexuponOutcome +
age +
AgeuponOutcome +
weekend +
hour +
minutes +
breed1 +
namelength +
named +
wday +
mix,
data = data)[,-1]
design_matrix_train <- design_matrix[1:dim(train)[1],]
design_matrix_test <- design_matrix[-(1:dim(train)[1]),]
new_y <- as.numeric(y) - 1 # for xgboost.
save.image("data.Rdata")
load("data.Rdata")
sample<- design_matrix_train[1:5000,]
sample_y <- new_y[1:5000]
]
model <- xgboost(data = sample, label = sample_y,
nround = 100,
objective = "multi:softprob",
num_class = 5)
library(xgboost)
model <- xgboost(data = sample, label = sample_y,
nround = 100,
objective = "multi:softprob",
num_class = 5)
nround = 100
xgb.cv(data = sample, label = sample_y,
nround = nround,
objective = "multi:softprob",
num_class = 5,
eta = 0.1,
max.depth = 3,
min_child_weight = 1,
colsample_bytree = 1,
gamma = 1,
nfold = 5, verbose = 0) -> cv
nround = 100
xgb.cv(data = sample, label = sample_y,
nround = nround,
objective = "multi:softprob",
num_class = 5,
eta = 0.1,
max.depth = 3,
min_child_weight = 1,
colsample_bytree = 1,
gamma = 1,
nfold = 5, verbose = 1) -> cv
which.min(cv$test.merror.mean)
min(cv$test.merror.mean)
ggplot(cv, aes(x = 1:nround)) +
geom_line(aes(y = train.merror.mean), alpha = 0.5) +
geom_line(aes(y = test.merror.mean), color = "red") +
geom_point(aes(x = which.min(cv$test.merror.mean),
y = min(cv$test.merror.mean)), size = 5)+
ylim(c(0.2, 0.4))
library(ggplot2)
library(caret)
xgbGrid <- expand.grid(max_depth = 1:5,
nrounds = 200,
eta = 0.1,
min_child_weight = c(1, 0.8),
colsample_bytree = 1,
gamma = 1)
modelxgb <- train(OutcomeType ~
AnimalType + SexuponOutcome + age + weekend + hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl=control,
tuneGrid = xgbGrid)
xgbGrid <- expand.grid(max_depth = 1:5,
nrounds = 200,
eta = 0.1,
min_child_weight = c(1, 0.8),
colsample_bytree = 1,
gamma = 1)
trControl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl=control,
tuneGrid = xgbGrid)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl= trControl,
tuneGrid = xgbGrid)
?expand.grid
xgbGrid <- expand.grid(max_depth = 5,
nrounds = 200,
eta = 0.1,
min_child_weight = c(1, 0.8),
colsample_bytree = 1,
gamma = 1)
trControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl= trControl,
tuneGrid = xgbGrid)
trControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl= trControl,
tuneGrid = xgbGrid)
plot(modelxgb)
model_xgb
modelxgb
?train
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
metric = "ROC",
trControl= trControl,
tuneGrid = xgbGrid)
trControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1,
classProbs = TRUE)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
metric = "ROC",
trControl= trControl,
tuneGrid = xgbGrid)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
metric = "logloss",
trControl= trControl,
tuneGrid = xgbGrid)
xgb.cv(data = sample, label = sample_y,
nround = nround,
objective = "multi:softprob",
metrics = "mlogloss",
num_class = 5,
eta = 0.1,
max.depth = 3,
min_child_weight = 1,
colsample_bytree = 1,
gamma = 1,
nfold = 5, verbose = 1) -> cv
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
metric = "mlogloss",
trControl= trControl,
tuneGrid = xgbGrid)
xgbGrid <- expand.grid(max_depth = 5:7,
nrounds = 200,
eta = 0.1,
min_child_weight = c(1, 0.8),
colsample_bytree = 1,
gamma = 1)
trControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1,
classProbs = TRUE)
modelxgb <- train(OutcomeType ~ AnimalType + SexuponOutcome + age +
hour + named + mix,
data = train[1:5000,],
method = "xgbTree",
trControl= trControl,
tuneGrid = xgbGrid)
plot(modelxgb)
