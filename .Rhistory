design_matrix_in <- model.matrix(OutcomeType ~ SexuponOutcome +
age + hour + named + mix + breed1 +
weekend + hour + month + as.factor(year) , data = train)[,-1]
dim(design_matrix_in)
library(LiblineaR)
library(randomForest)
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
model_gen <- LiblineaR(design_matrix, y, type = 0)
table(unlist(predict(model_gen, design_matrix)), y) ->results
sum(diag(results))/sum(results)
trees = 50
model_rf <- randomForest(design_matrix, y, ntree = trees)
table(predict(model_rf, design_matrix), y) -> results
sum(diag(results))/sum(results)
model_rf$err.rate
plot(model_rf)
plot(model_rf, ylim = c(0, 1))
gsub(" Mix", "", test$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> test$breed1
test$breed1[!(test$breed1 %in% c("Pit Bull",
"Domestic Shorthair", "Domestic Medium Hair",
"Domestic Longhair", "Siamese"))] <- "other"
train %>%  count(Name)
arrange(desc(n))
train %>%  count(Name) %>%
arrange(desc(n))
train %>%  count(Name) %>%
arrange(desc(n)) -> temp
View(temp)
train %>%  count(Name) %>%
filter(n > 20)
arrange(desc(n)) -> temp
train %>%  count(Name) %>%
filter(n > 20) %>%
arrange(desc(n)) -> temp
train$name[!(train$Name %in% temp$Name)] <- "weird"
train$name <- train$Name
train$name[!(train$Name %in% temp$Name)] <- "weird"
train %>%  count(Name) %>%
filter(n > 50) %>%
arrange(desc(n)) -> temp
train$name <- train$Name
train$name[!(train$Name %in% temp$Name)] <- "weird"
train$name[train$name == ""] <- "noname"
pplot(name)
train$name[!(train$name %in% c("weird", "noname"))] <- "regular"
pplot(name)
train %>%  count(Name) %>%
filter(n > 20) %>%
arrange(desc(n)) -> temp
train$name <- train$Name
train$name[!(train$Name %in% temp$Name)] <- "weird"
train$name[train$name == ""] <- "noname"
train$name[!(train$name %in% c("weird", "noname"))] <- "regular"
pplot(name)
summary(train$Name,maxsum=Inf)
trainNameSummary <- summary(train$Name,maxsum=Inf)
names(trainNameSummary)
popularBreeds <- names(summary(train$Breed,maxsum=10L))
summary(train$Breed)
train$Breed
summary(train$Breed)
library(lubridate)
library(lubridate)
summary(as.factor(train$Breed))
summary(as.factor(train$Breed),maxsum=10L)
10L
summary(as.factor(train$Breed),maxsum=10L)  %>% prop.table()
summary(as.factor(train$Breed),maxsum=30L)
summary(as.factor(train$names))
summary(as.factor(train$Breed)) -> temp
temp
?summary
pplot(name)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
#train %>% filter(AnimalType == "Cat") -> train
#sapply(train, function(x){unique(x) %>% length()})
#AnimalID        Name       DateTime    OutcomeType
#26729           6375          22918              5
#OutcomeSubtype     AnimalType SexuponOutcome AgeuponOutcome
#17              2              6             45
#Breed          Color
#1380            366
#[1] "AnimalID"       "Name"           "DateTime"
#[4] "OutcomeType"    "OutcomeSubtype" "AnimalType"
#[7] "SexuponOutcome" "AgeuponOutcome" "Breed"
#[10] "Color"
#plot function:
#NAME:
train$named <- 1*(train$Name != "")
#let's start with DATETIME:
train %>%
mutate(year = year(train$DateTime),
month = month(train$DateTime),
day = day(train$DateTime),
hour = hour(train$DateTime),
wday = wday(train$DateTime)) -> train
#make a weekend var:
train$weekend <- 1*train$wday %in% c(1, 7)
# so I should use weekend, year, month and hour - no NA's
#SEXUPONOUTCOME:
# seems important:
train$SexuponOutcome[train$SexuponOutcome == ""] <- "Unknown"
#AGEUPONOUTCOME:
train$age  <- train$AgeuponOutcome
train$age[grepl("day", train$AgeuponOutcome)] <- "< a week"
train$age[grepl("week", train$AgeuponOutcome)] <-  "< a month"
train$age[train$age == ""] <- "1 year"
train$age[train$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
train$mix <- 1*(grepl("Mix", train$Breed, fixed = TRUE))
#BREED:
# seems to matter mostly for cats & PitBull:
gsub(" Mix", "", train$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> train$breed1
train$breed1[!(train$breed1 %in% c("Pit Bull",
"Domestic Shorthair", "Domestic Medium Hair",
"Domestic Longhair", "Siamese"))] <- "other"
# now we're good.
design_matrix_in <- model.matrix(OutcomeType ~ SexuponOutcome +
age + hour + named + mix + breed1 +
weekend + hour + month + as.factor(year) , data = train)[,-1]
rm(temp)
test <- read.csv("test.csv", stringsAsFactors = FALSE)
test$named <- 1*(test$Name != "")
#let's start with DATETIME:
test %>%
mutate(year = year(test$DateTime),
month = month(test$DateTime),
day = day(test$DateTime),
hour = hour(test$DateTime),
wday = wday(test$DateTime)) -> test
#make a weekend var:
test$weekend <- 1*test$wday %in% c(1, 7)
test %>% count(SexuponOutcome)
test$SexuponOutcome[test$SexuponOutcome == ""] <- "Unknown"
test$age  <- test$AgeuponOutcome
test$age[grepl("day", test$AgeuponOutcome)] <- "< a week"
test$age[grepl("week", test$AgeuponOutcome)] <-  "< a month"
test$age[test$age == ""] <- "1 year"
test$age[test$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
test$mix <- 1*(grepl("Mix", test$Breed, fixed = TRUE))
#BREED:
# seems to matter mostly for cats & PitBull:
gsub(" Mix", "", test$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> test$breed1
test$breed1[!(test$breed1 %in% c("Pit Bull",
"Domestic Shorthair", "Domestic Medium Hair",
"Domestic Longhair", "Siamese"))] <- "other"
design_matrix_test <- model.matrix(~ AnimalType + SexuponOutcome +
age + hour + named + mix +
weekend + hour + month + as.factor(year) , data = test)[,-1]
library(LiblineaR)
library(randomForest)
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
trees = 700
model_rf <- randomForest(design_matrix, y, ntree = trees)
predict(model_rf, design_matrix_test, type = "vote") -> prediction
solution <- data.frame('ID' = test$ID, prediction)
write.csv(x = solution, file = "rf3_prediction.csv", row.names = FALSE)
design_matrix_test <- model.matrix(~ AnimalType + SexuponOutcome +
age + hour + named + mix + breed1
weekend + hour + month + as.factor(year) , data = test)[,-1]
design_matrix_test <- model.matrix(~ AnimalType + SexuponOutcome +
age + hour + named + mix + breed1 +
weekend + hour + month + as.factor(year) , data = test)[,-1]
predict(model_rf, design_matrix_test, type = "vote") -> prediction
solution <- data.frame('ID' = test$ID, prediction)
write.csv(x = solution, file = "rf3_prediction.csv", row.names = FALSE)
?do.call
train <- read.csv("~/Documents/R/MINST/train.csv", stringsAsFactors=FALSE)
View(train)
library(randomForest)
set.seed(132)
numTrain <- 40000
numTrees <- 50
LogLoss <- function(actual, predicted, eps=1e-15) {
predicted[predicted < eps] <- eps;
predicted[predicted > 1 - eps] <- 1 - eps;
-1/nrow(actual)*(sum(actual*log(predicted)))
}
library(gbm)
?gbm.fit
gbm1 <- gbm.fit(x = design_matrix, y,
distribution="multinomial",
shrinkage=0.05,
n.trees=200,
interaction.depth=3L,
train.fraction=0.8,
keep.data=FALSE,
verbose=TRUE
)
summary(gbm)
summary(gbm1)
predict(gbm1,design_matrix_test)[1:10]
testPreds2 <- predict(gbm1,design_matrix_test)
testPreds2
View(testPreds2)
testPreds2 <- predict(gbm1,design_matrix_test, type = "response")
?predict.gbm
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
View(trainPreds2)
gbm1 <- gbm.fit(x = design_matrix, y,
distribution="multinomial",
shrinkage=0.05,
n.trees=100,
interaction.depth=3L,
train.fraction=0.8,
keep.data=FALSE,
verbose=TRUE
)
gbm.perf(gbm1)
gbm1 <- gbm.fit(x = design_matrix, y,
distribution="multinomial",
shrinkage=0.05,
n.trees=400,
interaction.depth=3L,
train.fraction=0.8,
keep.data=FALSE,
verbose=TRUE
)
gbm.perf(gbm1)
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
?confusion
confusion <- function(a, b){
tbl <- table(a, b)
mis <- 1 - sum(diag(tbl))/sum(tbl)
list(table = tbl, misclass.prob = mis)
}
?gbm.oerf
?gbm.perf
gbm.perf(gbm1, oobag.curve = TRUE, overlay = TRUE, method ="OOB")
temp <- gbm.perf(gbm1, oobag.curve = TRUE, overlay = TRUE, method ="OOB")
temp <- gbm.perf(gbm1)
temp <- gbm.perf(gbm1, oobag.curve = TRUE, overlay = TRUE, method ="OOB")
temp <- gbm.perf(gbm1)
temp <- gbm.perf(gbm1, oobag.curve = TRUE, overlay = TRUE, method ="OOB")
round(trainPreds2) -> temp
View(temp)
0*"temp"
melt(trainPreds2)
library(reshape2)
melt(trainPreds2)
melt(trainPreds2) -> temp2
View(temp2)
melt(temp) -> temp2
temp2 %>% filter(value ==1) -> temp2
temp2 %>% arrange(Var1) -> temp2
sum(temp)
vignette("caretTrain", package="caret")
library(caret)
sum(temp)
vignette("caretTrain", package="caret")
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
MultiLogLoss <- function(act, pred)
{
eps = 1e-15;
nr <- nrow(pred)
pred = matrix(sapply( pred, function(x) max(eps,x)), nrow = nr)
pred = matrix(sapply( pred, function(x) min(1-eps,x)), nrow = nr)
ll = sum(act*log(pred) + (1-act)*log(1-pred))
ll = ll * -1/(nrow(act))
return(ll);
}
dim(trainPreds2)
y[1:10]
model.matrix(y) -> temp
model.matrix(y~) -> temp
model.matrix(~y) -> temp
MultiLogLoss(trainPreds2, temp)
dim(temp)
dim(trainPreds2)
View(trainPreds2)
View(temp)
y[1:10]
model.matrix(~y[1:10])
?model.matrix
model.matrix(~0 + y) -> temp
MultiLogLoss(trainPreds2, temp)
dim(temp)
dim(trainPreds2)
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
dim(testPreds2)
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
dim(testPreds2)
predict(gbm1,design_matrix, type = "response")
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
dim(design_matrix)
round(trainPreds2) -> temp
dim(testPreds2)
model.matrix(~ 0 + y) -> temp
MultiLogLoss(trainPreds2, temp)
dim(testPreds2) = c(26729, 5)
predict(gbm1,design_matrix, type = "response") %>% dim()
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
dim(trainPreds2)
dim(trainPreds2) = c(26729, 5)
MultiLogLoss(trainPreds2, temp)
predict(model_rf, design_matrix, type = "response")[1:10]
predict(model_rf, design_matrix, type = "vote")[1:10]
MultiLogLoss(predict(model_rf, design_matrix, type = "vote"), temp)
gbm1 <- gbm.fit(x = design_matrix, y,
distribution="multinomial",
shrinkage=0.05,
n.trees=400,
interaction.depth=6,
train.fraction=0.8,
keep.data=FALSE,
verbose=TRUE
)
trainPreds2 <- predict(gbm1,design_matrix, type = "response")
dim(trainPreds2) = c(26729, 5)
gbm.perf()
gbm.perf(gbm1)
gbm.perf(gbm1)
model.matrix(~ 0 + y) -> temp
MultiLogLoss(trainPreds2, temp)
LogLoss <- function(actual, predicted, eps=1e-15) {
predicted[predicted < eps] <- eps;
predicted[predicted > 1 - eps] <- 1 - eps;
-1/nrow(actual)*(sum(actual*log(predicted)))
}
LogLoss(trainPreds2, temp)
LogLoss(trainPreds2, temp)*2
MultiLogLoss(predict(model_rf, design_matrix, type = "vote"), temp)
temp <- (predict(model_rf, design_matrix, type = "vote") + trainPreds2)/2
MultiLogLoss(temp, model.matrix(~ 0 + y))
install.packages("ranger")
library("ranger")
?ranger
df<- data.frame(design_matrix, y)
View(df)
model_ranger(y~., data = df)
model_ranger<- ranger(y~., data = df)
summary(model_ranger)
model_ranger$prediction.error
plot(model_ranger)
model_ranger$mtry
model_ranger$confusion.matrix
model_ranger$num.trees
model_ranger$variable.importance
system.time(
model_rf <- randomForest(design_matrix, y, ntree = 50)
)
system.time(
model_ranger<- ranger(y~., data = df, num.trees = 50)
)
model_ranger
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
#train %>% filter(AnimalType == "Cat") -> train
#sapply(train, function(x){unique(x) %>% length()})
#AnimalID        Name       DateTime    OutcomeType
#26729           6375          22918              5
#OutcomeSubtype     AnimalType SexuponOutcome AgeuponOutcome
#17              2              6             45
#Breed          Color
#1380            366
#[1] "AnimalID"       "Name"           "DateTime"
#[4] "OutcomeType"    "OutcomeSubtype" "AnimalType"
#[7] "SexuponOutcome" "AgeuponOutcome" "Breed"
#[10] "Color"
#plot function:
#NAME:
train$named <- 1*(train$Name != "")
#let's start with DATETIME:
train %>%
mutate(year = year(train$DateTime),
month = month(train$DateTime),
day = day(train$DateTime),
hour = hour(train$DateTime),
wday = wday(train$DateTime)) -> train
#make a weekend var:
train$weekend <- 1*train$wday %in% c(1, 7)
# so I should use weekend, year, month and hour - no NA's
#SEXUPONOUTCOME:
# seems important:
train$SexuponOutcome[train$SexuponOutcome == ""] <- "Unknown"
#AGEUPONOUTCOME:
train$age  <- train$AgeuponOutcome
train$age[grepl("day", train$AgeuponOutcome)] <- "< a week"
train$age[grepl("week", train$AgeuponOutcome)] <-  "< a month"
train$age[train$age == ""] <- "1 year"
train$age[train$age %in% c("13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
"19 years", "20 years")] <- "> 12 years"
train$mix <- 1*(grepl("Mix", train$Breed, fixed = TRUE))
#BREED:
# seems to matter mostly for cats & PitBull:
gsub(" Mix", "", train$Breed) -> temp
strsplit(x = temp, split = "/") %>% sapply(function(x){x[1]}) -> train$breed1
count(train, breed1) %>%
arrange(desc(n)) %>%
filter(n >75) -> popular
train$breed1[!(train$breed1 %in% popular$breed1)] <- "Exotic"
#train$breed1[!(train$breed1 %in% c("Pit Bull",
#                                    "Domestic Shorthair", "Domestic Medium Hair",
#                               "Domestic Longhair", "Siamese"))] <- "other"
#COLORS:
strsplit(x = train$Color, split = "/") %>% sapply(function(x){x[1]}) -> train$color1
train %>% count(color1) %>% arrange(desc(n)) %>% filter(n > 200) -> colors
train$color1[!(train$color1 %in% colors$color1)] <- "othercolor"
#dash in the breed:
train$dash <- grepl("/", train$Breed)
#number of letter in the name:
train$namelength <- nchar(train$Name)
# now we're good.
design_matrix_in <- model.matrix(OutcomeType ~ SexuponOutcome +
age + hour + named + mix + breed1 + wday +
weekend  + month + as.factor(year) + color1 +
dash + namelength,
data = train)[,-1]
design_matrix_in <- model.matrix(OutcomeType ~ age + hour, data = train)[,-1]
library(LiblineaR)
library(randomForest)
library(ranger)
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
df<- data.frame(design_matrix, y)
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 100,
write.forest = TRUE, probability = TRUE)
MultiLogLoss <- function(act, pred)
{
eps = 1e-15;
nr <- nrow(pred)
pred = matrix(sapply( pred, function(x) max(eps,x)), nrow = nr)
pred = matrix(sapply( pred, function(x) min(1-eps,x)), nrow = nr)
ll = sum(act*log(pred) + (1-act)*log(1-pred))
ll = ll * -1/(nrow(act))
return(ll);
}
model.matrix(~ 0 + y) -> temp
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, temp)
model_ranger<- ranger(y~.,  data = df, num.trees = 200,
write.forest = TRUE, probability = TRUE)
MultiLogLoss(predicts$predictions, temp)
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, temp)
design_matrix_in <- model.matrix(OutcomeType ~ age + hour, data = train)[,-1]
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
df<- data.frame(design_matrix, y)
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 200,
write.forest = TRUE, probability = TRUE)
model.matrix(~ 0 + y) -> temp
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, temp)
design_matrix_in <- model.matrix(OutcomeType ~ age, data = train)[,-1]
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
df<- data.frame(design_matrix, y)
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 200,
write.forest = TRUE, probability = TRUE)
model_ranger
model.matrix(~ 0 + y) -> temp
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, temp)
model.matrix(~ 0 + y) -> realpred
MultiLogLoss(predicts$predictions, realpred)
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 50,
write.forest = TRUE, probability = TRUE)
model.matrix(~ 0 + y) -> realpred
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, realpred)
design_matrix_in <- model.matrix(OutcomeType ~ SexuponOutcome, data = train)[,-1]
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 50,
write.forest = TRUE, probability = TRUE)
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
df<- data.frame(design_matrix, y)
#RANGER roughly 5 times faster:
model_ranger<- ranger(y~.,  data = df, num.trees = 50,
write.forest = TRUE, probability = TRUE)
model.matrix(~ 0 + y) -> realpred
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, realpred)
model_ranger
design_matrix_in <- model.matrix(OutcomeType ~ SexuponOutcome +AgeuponOutcome, data = train)[,-1]
y = as.factor(train$OutcomeType)
design_matrix <- cbind(design_matrix_in)
df<- data.frame(design_matrix, y)
model_ranger<- ranger(y~.,  data = df, num.trees = 200,
write.forest = TRUE, probability = TRUE)
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, realpred)
model_ranger<- ranger(y~.,  data = df, num.trees = 500,
write.forest = TRUE, probability = TRUE)
predict(model_ranger, df) -> predicts
MultiLogLoss(predicts$predictions, realpred)
pred1 = c(0.8,0.2)
pred2 = c(0.6,0.4)
pred <- rbind(pred1,pred2)
pred
act1 <- c(1,0)
act2 <- c(1,0)
act <- rbind(act1,act2)
MultiLogLoss(act,pred)
